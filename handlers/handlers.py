from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentTypes
from functions.markup import *

from functions.disp import dp, bot, PAYMENTS_TOKEN

from datetime import datetime as dt

import functions.func as func

import db

class FindUser(StatesGroup):
    type = State()
    find = State()

class FeedBack_add(StatesGroup):
    seller_userid = State()
    buyer_userid = State()
    type = State()
    text = State()

class DealCreate(StatesGroup):
    i_am = State()
    seller_userid = State()
    buyer_userid = State()
    seller_name = State()
    buyer_name = State()
    sum = State()
    desc = State()

class DealSend(StatesGroup):
    seller_userid = State()
    buyer_userid = State()
    deal_id = State()
    send = State()

class Dispute_Add(StatesGroup):
    from_user = State()
    seller_userid = State()
    buyer_userid = State()
    seller_name = State()
    buyer_name = State()
    deal_id = State()
    desc = State()

class Dispute_Msg(StatesGroup):
    deal_id = State()
    text = State()

class Payout_create(StatesGroup):
    text = State()
    sum = State()
    
class Donate_create(StatesGroup):
    sum = State()

class PAY(StatesGroup):
    sum = State()


#------------------------------------–ö–ù–û–ü–ö–ò
@dp.message_handler(text=['üé© –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'])
async def profile(message: types.Message):
    profile = await db.profile(message.from_user.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data=f"mydeals:{message.from_user.id}"))
    keyboard.add(InlineKeyboardButton(f"üéÅ –î–æ–Ω–∞—Ç—ã", callback_data=f"donate:{message.from_user.id}"), InlineKeyboardButton(f"üó£ –°–ø–æ—Ä—ã", callback_data=f"my_disputes:{message.from_user.id}"))
    keyboard.add(InlineKeyboardButton(f"‚¨áÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"pays:{message.from_user.id}"), InlineKeyboardButton(f"‚¨ÜÔ∏è –í—ã–≤–µ—Å—Ç–∏", callback_data=f"my_payouts:{message.from_user.id}"))
    feedbacks = await db.feedbacks(message.from_user.id)
    disputes = await db.disputes_count(message.from_user.id)
    disputes_win = await db.disputes_win(message.from_user.id)
    positive = 0
    negative = 0
    if (len(feedbacks) != 0):
        for i in range(len(feedbacks)):
            if (feedbacks[i][3] == "üëç"):
                positive += 1
            elif (feedbacks[i][3] == "üëé"):
                negative += 1
    await message.answer("<blockquote>üë§</blockquote>\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{profile[3]}\n"
                    f"<b>ID:</b> {profile[1]}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {profile[4]}\n"
                    f"<b>–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:</b> {dt.fromtimestamp(profile[7])}\n\n"
                    f"<blockquote>üíµ</blockquote>\n"
                    f"<b>–ë–∞–ª–∞–Ω—Å:</b> {profile[6]}‚ÇΩ\n\n"
                    f"<blockquote>üí∞</blockquote>\n"
                    f"<b>–ü—Ä–æ–¥–∞–∂:</b> {profile[8]}\n"
                    f"<b>–ü–æ–∫—É–ø–æ–∫:</b> {profile[9]}\n"
                    f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {profile[11]}‚ÇΩ\n"
                    f"<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:</b> {profile[10]}‚ÇΩ\n"
                    f"<b>–ö–æ–ª-–≤–æ –û—Ç–∑—ã–≤–æ–≤:</b>\n    üëç - {positive}\n    üëé - {negative}\n"
                    f"<b>–°–ø–æ—Ä–æ–≤:</b> {len(disputes)}\n"
                    f"<b>–í—ã–∏–≥—Ä–∞–Ω–æ:</b> {len(disputes_win)}", reply_markup=keyboard, parse_mode="HTML")

#–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query_handler(text_startswith="back_to_profile:", state="*")
async def mydeals(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    profile = await db.profile(userid)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data=f"mydeals:{userid}"))
    keyboard.add(InlineKeyboardButton(f"üéÅ –î–æ–Ω–∞—Ç—ã", callback_data=f"donate:{userid}"), InlineKeyboardButton(f"üó£ –°–ø–æ—Ä—ã", callback_data=f"my_disputes:{userid}"))
    keyboard.add(InlineKeyboardButton(f"‚¨áÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"pays:{userid}"), InlineKeyboardButton(f"‚¨ÜÔ∏è –í—ã–≤–µ—Å—Ç–∏", callback_data=f"my_payouts:{userid}"))
    feedbacks = await db.feedbacks(userid)
    positive = 0
    negative = 0
    disputes = await db.disputes_count(userid)
    disputes_win = await db.disputes_win(userid)
    if (len(feedbacks) != 0):
        for i in range(len(feedbacks)):
            if (feedbacks[i][3] == "üëç"):
                positive += 1
            elif (feedbacks[i][3] == "üëé"):
                negative += 1
    await call.message.edit_text("<blockquote>üë§</blockquote>\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{profile[3]}\n"
                    f"<b>ID:</b> {profile[1]}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {profile[4]}\n"
                    f"<b>–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:</b> {dt.fromtimestamp(profile[7])}\n\n"
                    f"<blockquote>üíµ</blockquote>\n"
                    f"<b>–ë–∞–ª–∞–Ω—Å:</b> {profile[6]}‚ÇΩ\n\n"
                    f"<blockquote>üí∞</blockquote>\n"
                    f"<b>–ü—Ä–æ–¥–∞–∂:</b> {profile[8]}\n"
                    f"<b>–ü–æ–∫—É–ø–æ–∫:</b> {profile[9]}\n"
                    f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {profile[11]}‚ÇΩ\n"
                    f"<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:</b> {profile[10]}‚ÇΩ\n"
                    f"<b>–ö–æ–ª-–≤–æ –û—Ç–∑—ã–≤–æ–≤:</b>\n    üëç - {positive}\n    üëé - {negative}\n"
                    f"<b>–°–ø–æ—Ä–æ–≤:</b> {len(disputes)}\n"
                    f"<b>–í—ã–∏–≥—Ä–∞–Ω–æ:</b> {len(disputes_win)}", reply_markup=keyboard, parse_mode="HTML")

@dp.message_handler(text=['üîç –ù–∞–π—Ç–∏ user'])
async def find_user(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ü–æ userid", callback_data=f"find_user:userid"))
    keyboard.add(InlineKeyboardButton(f"–ü–æ @username", callback_data=f"find_user:username"))
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)

@dp.message_handler(text=['üí¨ –ü–æ–º–æ—â—å'])
async def find_user(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å?", url=f"https://google.com"), InlineKeyboardButton(f"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", url=f"https://google.com"))
    keyboard.add(InlineKeyboardButton(f"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–≥–∞—Ä–∞–Ω—Ç–æ–º?", url=f"https://google.com"))
    await message.answer("–ü–æ–º–æ—â—å:", reply_markup=keyboard)
#------------------------------------–ö–ù–û–ü–ö–ò

#------------------------------------–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
#–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query_handler(text_startswith="pays:", state="*")
async def pay(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{userid}"))
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!", reply_markup=keyboard)
    await PAY.sum.set()

#–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=PAY.sum)
async def pay(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{message.from_user.id}"))
    try:
        int(message.text)
        check = await db.profile(message.from_user.id)
        if(int(message.text) < 100):
            await message.answer(f"–û—à–∏–±–∫–∞! –°—É–º–º–∞ –º–µ–Ω—å—à–µ 100‚ÇΩ!", reply_markup=keyboard)
            await PAY.sum.set()
        else:
            PRICE = types.LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {message.text}‚ÇΩ", amount=int(message.text)*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
            await bot.send_invoice(message.chat.id,
                           title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                           description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {message.text}‚ÇΩ",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="update-balance",
                           payload="test-invoice-payload")
            await state.finish()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=keyboard)
        await PAY.sum.set()

#–ü—Ä–µ—á–µ–∫–∞—É—Ç
@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

#–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    await bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}‚ÇΩ")
    check = await db.profile(message.from_user.id)
    await db.upd_user("balance", check[6]+int(message.successful_payment.total_amount // 100), message.from_user.id)
#------------------------------------–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê

#------------------------------------–î–û–ù–ê–¢–´
#–î–æ–Ω–∞—Ç—ã
@dp.callback_query_handler(text_startswith="donate:", state="*")
async def donate(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    userid = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"üí∞–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"donates:pay:{userid}"))
    keyboard.add(InlineKeyboardButton(f"ü•á–¢–æ–ø –¥–æ–Ω–∞—Ç–æ–≤", callback_data=f"donates:top:{userid}"))
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{userid}"))
    await call.message.edit_text(f"üîÖ–í—Å–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–π–¥—É—Ç –Ω–∞ –†–∞–∑–≤–∏—Ç–∏–µ –ü—Ä–æ–µ–∫—Ç–∞, –∑–∞–∫—É–ø —Ä–µ–∫–ª–∞–º—ã –∏ —Ç.–ø.\n\nüîÖ–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ª—é–±—É—é –ø–æ–º–æ—â—å –ø—Ä–æ–µ–∫—Ç—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!", reply_markup=keyboard)

#–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å/–í—ã–≤–æ–¥ —Ç–æ–ø–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤
@dp.callback_query_handler(text_startswith="donates:", state="*")
async def donate(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    userid = int(call.data.split(":")[2])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"donate:{userid}"))
    if (type == "pay"):
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ —á–∏—Å–ª–æ–º (–æ—Ç 10‚ÇΩ)", reply_markup=keyboard, parse_mode="Markdown")
        await Donate_create.sum.set()
    elif (type == "top"):
        check = await db.top_donate()
        text = "üèÜ<b>–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:</b>\n\n"
        if (len(check) != 0):
            for i in range(len(check)):
                text += f"<b>üî• {i+1}) <a href='tg://user?id={check[i][1]}'>{check[i][2]}</a> {check[i][3]}‚ÇΩ</b>\n"
        else:
            text += "–î–æ–Ω–∞—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç üò¢"
        await call.message.edit_text(f"{text}", reply_markup=keyboard, parse_mode="HTML")

#–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞
@dp.message_handler(state=Donate_create.sum)
async def my_payout(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"donate:{message.from_user.id}"))
    try:
        int(message.text)
        check = await db.profile(message.from_user.id)
        if (check[6] < int(message.text)):
            await message.answer(f"–û—à–∏–±–∫–∞! –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å!\n–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ –∫ –¥–æ–Ω–∞—Ç—É: {check[6]}", reply_markup=keyboard)
            await Donate_create.sum.set()
        elif(int(message.text) < 10):
            await message.answer(f"–û—à–∏–±–∫–∞! –°—É–º–º–∞ –º–µ–Ω—å—à–µ 10‚ÇΩ!", reply_markup=keyboard)
            await Donate_create.sum.set()
        else:
            check_don = await db.check_donate(message.from_user.id)
            if (len(check_don) == 0):
                await db.create_donate(message.from_user.id, message.from_user.full_name, int(message.text))
                await message.answer(f"–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—ã —Å–¥–µ–ª–∞–ª –Ω–∞—à –ø—Ä–æ–µ–∫—Ç —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ!", reply_markup=keyboard)
                await db.upd_user("balance", check[6]-int(message.text), message.from_user.id)
            else:
                await db.upd_donate(message.from_user.id, int(check_don[3])+int(message.text))
                await message.answer(f"–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—ã —Å–¥–µ–ª–∞–ª –Ω–∞—à –ø—Ä–æ–µ–∫—Ç —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ!", reply_markup=keyboard)
                await db.upd_user("balance", check[6]-int(message.text), message.from_user.id)
            await state.finish()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=keyboard)
        await Donate_create.sum.set()
#------------------------------------–î–û–ù–ê–¢–´

#------------------------------------–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
#–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text_startswith="find_user:", state="*")
async def mydeals(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∞", callback_data=f"cancel"))
    if (type == "userid"):
        await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ userid. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞.", reply_markup=keyboard)
    elif (type == "username"):
        await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ username *(–±–µ–∑ @)*. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞.", reply_markup=keyboard, parse_mode="Markdown")
    await FindUser.type.set()
    await state.update_data(type=type)

#–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ò–Ω—Ñ–æ –æ –Ω—ë–º
@dp.message_handler(state=FindUser.type)
async def user(message: types.Message, state: FSMContext):
    await state.update_data(find=message.text)
    data = await state.get_data()
    find_user = await db.find_user(data['type'], data['find'])
    keyboard = InlineKeyboardMarkup()
    check_admin = await db.check_admin(message.from_user.id)
    feedbacks = await db.feedbacks(find_user[1])
    positive = 0
    negative = 0
    rating = 0
    disputes = await db.disputes_count(find_user[1])
    disputes_win = await db.disputes_win(find_user[1])
    if (len(feedbacks) != 0):
        for i in range(len(feedbacks)):
            if (feedbacks[i][3] == "üëç"):
                positive += 1
            elif (feedbacks[i][3] == "üëé"):
                negative += 1
        rating = int((positive/len(feedbacks)*100))
    if (check_admin == 1):
        if (find_user[5] == 0):
            keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"admin:add:{find_user[1]}:{message.from_user.id}"))
        if (find_user[5] == 1):
            keyboard.add(InlineKeyboardButton(f"–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"admin:del:{find_user[1]}:{message.from_user.id}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_create:{find_user[1]}:{message.from_user.id}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ç–∑—ã–≤—ã", callback_data=f"feedback:{find_user[1]}:{message.from_user.id}"))
    if (find_user == "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    elif (find_user):
        text =  f"<blockquote>üë§</blockquote>\n"
        text +=  f"<b>–°—Ç–∞—Ç—É—Å:</b> {find_user[4]}\n"
        text +=  f"<b>–Æ–∑–µ—Ä </b><a href='tg://user?id={find_user[1]}'>{find_user[2]}</a>\n"
        text +=  f"<b>–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:</b> {dt.fromtimestamp(find_user[7])}\n\n"
        text +=  f"<blockquote>üí∞</blockquote>\n" 
        text +=  f"<b>–ö–æ–ª-–≤–æ –û—Ç–∑—ã–≤–æ–≤:</b>\n    üëç - {positive}\n    üëé - {negative}\n"
        text +=  f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}%\n\n"
        text +=  f"<b>–ü—Ä–æ–¥–∞–∂:</b> {find_user[8]} —à—Ç.\n"
        text +=  f"<b>–ü–æ–∫—É–ø–æ–∫:</b> {find_user[9]} —à—Ç.\n"
        text +=  f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {find_user[11]} —Ä—É–±.\n"
        text +=  f"<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:</b> {find_user[10]} —Ä—É–±.\n\n"
        text +=  f"<blockquote>üìÇ</blockquote>\n"
        text +=  f"<b>–°–ø–æ—Ä–æ–≤: {len(disputes)}</b>\n"
        text +=  f"<b>–í—ã–∏–≥—Ä–∞–Ω–æ: {len(disputes_win)}</b>"
        if (find_user[1] == message.from_user.id):
            await message.answer(text, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    await state.finish()

#–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò–Ω—Ñ–æ –æ –Ω—ë–º
@dp.callback_query_handler(text_startswith="back_to_user:", state="*")
async def back_to_user(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    userid = int(call.data.split(":")[1])
    my_userid = int(call.data.split(":")[2])
    find_user = await db.find_user('userid', userid)
    keyboard = InlineKeyboardMarkup()
    feedbacks = await db.feedbacks(userid)
    check_admin = await db.check_admin(my_userid)
    positive = 0
    negative = 0
    rating = 0
    disputes = await db.disputes_count(userid)
    disputes_win = await db.disputes_win(userid)
    if (len(feedbacks) != 0):
        for i in range(len(feedbacks)):
            if (feedbacks[i][3] == "üëç"):
                positive += 1
            elif (feedbacks[i][3] == "üëé"):
                negative += 1
        rating = int((positive/len(feedbacks)*100))
    if (check_admin == 1):
        if (find_user[5] == 0):
            keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"admin:add:{find_user[1]}:{my_userid}"))
        if (find_user[5] == 1):
            keyboard.add(InlineKeyboardButton(f"–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"admin:del:{find_user[1]}:{my_userid}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_create:{find_user[1]}:{my_userid}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ç–∑—ã–≤—ã", callback_data=f"feedback:{find_user[1]}:{my_userid}"))
    text =  f"<blockquote>üë§</blockquote>\n"
    text +=  f"<b>–°—Ç–∞—Ç—É—Å:</b> {find_user[4]}\n"
    text +=  f"<b>–Æ–∑–µ—Ä </b><a href='tg://user?id={find_user[1]}'>{find_user[2]}</a>\n"
    text +=  f"<b>–î–∞—Ç–∞ –≤—Ö–æ–¥–∞:</b> {dt.fromtimestamp(find_user[7])}\n\n"
    text +=  f"<blockquote>üí∞</blockquote>\n" 
    text +=  f"<b>–ö–æ–ª-–≤–æ –û—Ç–∑—ã–≤–æ–≤:</b>\n    üëç - {positive}\n    üëé - {negative}\n"
    text +=  f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}%\n\n"
    text +=  f"<b>–ü—Ä–æ–¥–∞–∂:</b> {find_user[8]} —à—Ç.\n"
    text +=  f"<b>–ü–æ–∫—É–ø–æ–∫:</b> {find_user[9]} —à—Ç.\n"
    text +=  f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {find_user[11]} —Ä—É–±.\n"
    text +=  f"<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:</b> {find_user[10]} —Ä—É–±.\n\n"
    text +=  f"<blockquote>üìÇ</blockquote>\n"
    text +=  f"<b>–°–ø–æ—Ä–æ–≤: {len(disputes)}</b>\n"
    text +=  f"<b>–í—ã–∏–≥—Ä–∞–Ω–æ: {len(disputes_win)}</b>"
    if (find_user[1] == my_userid):
        await call.message.edit_text(text, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

#–í—ã–≤–æ–¥ –æ—Ç–∑—ã–≤–æ–≤
@dp.callback_query_handler(text_startswith="feedback:", state="*")
async def feed(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    my_userid = int(call.data.split(":")[2])
    list = await func.feedback(userid, 0, my_userid)
    await call.message.edit_text(list[0], reply_markup=list[1], parse_mode="Markdown")

#–ù–∑–Ω–∞—á–∏—Ç—å/—Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(text_startswith="admin:", state="*")
async def admin(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    userid = int(call.data.split(":")[2])
    my_userid = int(call.data.split(":")[3])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"back_to_user:{userid}:{my_userid}"))
    if (type == "add"):
        await db.upd_user("is_admin", 1, userid)
        await db.upd_user_adm("status", "Admin", userid)
        await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=keyboard)
        await bot.send_message(userid, "–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=AmainMenu)
    elif (type == "del"):
        await db.upd_user("is_admin", 0, userid)
        await db.upd_user_adm("status", "User", userid)
        await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard)
        await bot.send_message(userid, "–í–∞—Å —Å–Ω—è–ª–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=mainMenu)


#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –í—ã–±–æ—Ä —Ç–∏–ø–∞
@dp.callback_query_handler(text_startswith="deal_create:", state="*")
async def feed(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    my_userid = int(call.data.split(":")[2])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data=f"deal:buyer:{userid}:{my_userid}"))
    keyboard.add(InlineKeyboardButton(f"–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü", callback_data=f"deal:seller:{userid}:{my_userid}"))
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"back_to_user:{userid}:{my_userid}"))
    await call.message.edit_text("*‚ùî–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã –±—É–¥–µ—Ç–µ –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Å–¥–µ–ª–∫–µ.*", reply_markup=keyboard, parse_mode="Markdown")
#------------------------------------–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨

#------------------------------------–°–î–ï–õ–ö–ò
#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –£–∫–∞–∑–∞–Ω–∏–µ —Å—É–º–º—ã
@dp.callback_query_handler(text_startswith="deal:", state="*")
async def feed(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    userid = int(call.data.split(":")[2])
    my_userid = int(call.data.split(":")[3])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"back_to_user:{userid}:{my_userid}"))
    name = await db.profile(userid)
    my_name = await db.profile(my_userid)
    if (type == "buyer"):
        await call.message.edit_text("*–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100 —Ä—É–±)*", reply_markup=keyboard, parse_mode="Markdown")
        await DealCreate.sum.set()
        await state.update_data(buyer_userid=my_userid)
        await state.update_data(seller_userid=userid)
        await state.update_data(buyer_name=my_name[2])
        await state.update_data(seller_name=name[2])
        await state.update_data(i_am=type)
    elif (type == "seller"):
        await call.message.edit_text("*–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100 —Ä—É–±)*", reply_markup=keyboard, parse_mode="Markdown")
        await DealCreate.sum.set()
        await state.update_data(buyer_userid=userid)
        await state.update_data(seller_userid=my_userid)
        await state.update_data(buyer_name=name[2])
        await state.update_data(seller_name=my_name[2])
        await state.update_data(i_am=type)

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –£–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
@dp.message_handler(state=DealCreate.sum)
async def user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup()
    if (data['i_am'] == "seller"):
        my_userid = int(data['seller_userid'])
        userid = int(data['buyer_userid'])
    elif(data['i_am'] == "buyer"):
        my_userid = int(data['buyer_userid'])
        userid = int(data['seller_userid'])
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"back_to_user:{userid}:{my_userid}"))
    if (int(message.text) < 100):
        await message.answer("*–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 100 —Ä—É–±.\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—É—é 100 —Ä—É–±*", reply_markup=keyboard, parse_mode="Markdown")
        await DealCreate.sum.set()
    else:
        await state.update_data(sum=message.text)
        await message.answer("*–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ (–ü—Ä–æ–¥–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ VK, –ü–æ–∫—É–ø–∫–∞ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç.–¥)*", reply_markup=keyboard, parse_mode="Markdown")
        await DealCreate.desc.set()

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=DealCreate.desc)
async def user(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    data = await state.get_data()
    id = await db.add_deal(int(data['seller_userid']), int(data['buyer_userid']), data['seller_name'], data['buyer_name'], data['desc'], int(data['sum']))
    await message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É ‚Ññ{id}\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='tg://user?id={int(data['seller_userid'])}'>{data['seller_name']}</a>\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={int(data['buyer_userid'])}'>{data['buyer_name']}</a>\n"
                    f"–°—É–º–º–∞: {int(data['sum'])}‚ÇΩ\n"
                    f"–£—Å–ª–æ–≤–∏—è: {data['desc']}"
                    "<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    "‚ùóÔ∏è–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.\n\n"
                    "‚ùì–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–í–Ω–∏–º–∞–Ω–∏–µ:\n"
                    "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É!\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</blockquote>", parse_mode="HTML")
    if (data['i_am'] == "seller"):
        userid = int(data['buyer_userid'])
        sec_userid = int(data['seller_userid'])
    elif (data['i_am'] == "buyer"):
        userid = int(data['seller_userid'])
        sec_userid = int(data['buyer_userid'])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"deal_msg:accept:{id}:{userid}:{sec_userid}"), InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deal_msg:decline:{id}:{userid}:{sec_userid}"))
    await bot.send_message(userid, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É ‚Ññ{id}\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='tg://user?id={int(data['seller_userid'])}'>{data['seller_name']}</a>\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={int(data['buyer_userid'])}'>{data['buyer_name']}</a>\n"
                    f"–°—É–º–º–∞: {int(data['sum'])}‚ÇΩ\n"
                    f"–£—Å–ª–æ–≤–∏—è: {data['desc']}"
                    "<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    "‚ùóÔ∏è–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.\n\n"
                    "‚ùì–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–í–Ω–∏–º–∞–Ω–∏–µ:\n"
                    "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É!\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</blockquote>", reply_markup=keyboard, parse_mode="HTML")
    await state.finish()

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text_startswith="deal_msg:", state="*")
async def deal_msg(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    deal_id = int(call.data.split(":")[2])
    my_userid = int(call.data.split(":")[3])
    userid = int(call.data.split(":")[4])
    deal = await db.deal(deal_id)
    if (type == "accept"):
        await db.upd_deal(deal_id, 1)
        keyboard = InlineKeyboardMarkup()
        if(deal[2] == my_userid):
            keyboard.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"deal_pay:{deal_id}:{my_userid}:{userid}"))
            await call.message.edit_text(f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ ‚Ññ{deal_id}\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='tg://user?id={deal[1]}'>{deal[3]}</a>\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={deal[2]}'>{deal[4]}</a>\n"
                    f"–°—É–º–º–∞: {deal[6]*1.05}‚ÇΩ\n"
                    f"–£—Å–ª–æ–≤–∏—è: {deal[5]}"
                    "<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    "‚ùóÔ∏è–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.\n\n"
                    "‚ùì–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–í–Ω–∏–º–∞–Ω–∏–µ:\n"
                    "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É!\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</blockquote>", reply_markup=keyboard, parse_mode="HTML")
        elif(deal[2] == userid):
            keyboard.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"deal_pay:{deal_id}:{userid}:{my_userid}"))
            await call.message.edit_text("–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
            await bot.send_message(userid, f"–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ ‚Ññ{deal_id}\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='tg://user?id={deal[1]}'>{deal[3]}</a>\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={deal[2]}'>{deal[4]}</a>\n"
                    f"–°—É–º–º–∞: {deal[6]*1.05}‚ÇΩ\n"
                    f"–£—Å–ª–æ–≤–∏—è: {deal[5]}"
                    "<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    "‚ùóÔ∏è–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.\n\n"
                    "‚ùì–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–í–Ω–∏–º–∞–Ω–∏–µ:\n"
                    "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É!\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</blockquote>", reply_markup=keyboard, parse_mode="HTML")
    elif(type == "decline"):
        await bot.send_message(userid, f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await call.message.edit_text(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É ‚Ññ{deal_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!")
        await db.del_deal(deal_id)

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏
@dp.callback_query_handler(text_startswith="deal_pay:", state="*")
async def deal_pay(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    my_userid = int(call.data.split(":")[2])
    userid = int(call.data.split(":")[3])
    cur_balance = await db.profile(my_userid)
    deal = await db.deal(deal_id)
    keyboard = InlineKeyboardMarkup()
    kb = InlineKeyboardMarkup()
    if (cur_balance[6] < deal[6]*1.05):
        await call.message.answer("*–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏!\n –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!*", parse_mode="Markdown")
    else:
        keyboard.add(InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"deal_send:{deal_id}:{my_userid}:{userid}"))
        await db.upd_user("balance", cur_balance[6] - deal[6]*1.05, my_userid)
        kb.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute:{deal_id}:{my_userid}:{userid}:buyer"))
        await call.message.edit_text(f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! \n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞!", reply_markup=kb)
        await bot.send_message(userid, f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!", reply_markup=keyboard)
        await db.upd_deal(deal_id, 2)

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
@dp.callback_query_handler(text_startswith="deal_send:", state="*")
async def deal_send(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    my_userid = int(call.data.split(":")[3])
    await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫—É–ø–∫—É —Ñ–∞–π–ª–æ–º/—Ç–µ–∫—Å—Ç–æ–º/–∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é")
    await DealSend.send.set()
    await state.update_data(seller_userid=my_userid)
    await state.update_data(buyer_userid=userid)
    await state.update_data(deal_id=deal_id)

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=DealSend.send)
async def deal_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.copy_message(chat_id=int(data['buyer_userid']), from_chat_id=message.chat.id, message_id=message.message_id)
    await db.upd_deal(int(data['deal_id']), 3)
    keyboard = InlineKeyboardMarkup()
    keyboard2 = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_finish:accept:{int(data['deal_id'])}:{int(data['seller_userid'])}:{int(data['buyer_userid'])}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute:{int(data['deal_id'])}:{int(data['seller_userid'])}:{int(data['buyer_userid'])}:buyer"))
    keyboard2.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute:{int(data['deal_id'])}:{int(data['seller_userid'])}:{int(data['buyer_userid'])}:seller"))
    await bot.send_message(int(data['buyer_userid']), f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–æ–∫—É–ø–∫—É! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!", reply_markup=keyboard)
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.", reply_markup=keyboard2)
    await state.finish()

#–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏/–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞
@dp.callback_query_handler(text_startswith="deal_finish:", state="*")
async def deal_finish(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    deal_id = int(call.data.split(":")[2])
    seller = int(call.data.split(":")[3])
    buyer = int(call.data.split(":")[4])
    from_type = call.data.split(":")[5]
    seller_profile = await db.profile(seller)
    buyer_profile = await db.profile(buyer)
    deal = await db.deal(deal_id)
    keyboard = InlineKeyboardMarkup()
    if (type == "accept"):
        keyboard.add(InlineKeyboardButton(f"–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"deal_feedback:{seller}:{buyer}"))
        await db.upd_user("balance", seller_profile[6]+(deal[6]), seller)
        await db.upd_user("sell", seller_profile[8]+1, seller)
        await db.upd_user("sum_sell", seller_profile[10]+deal[6], seller)
        await db.upd_user("buy", buyer_profile[9]+1, buyer)
        await db.upd_user("sum_buy", buyer_profile[10]+deal[6], buyer)
        await db.upd_deal(deal_id, 5)
        await call.message.edit_text("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ!", reply_markup=keyboard)
        await bot.send_message(seller, f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deal[6]}‚ÇΩ")
    elif (type == "dispute"):
        check = await db.check_disp(deal_id)
        if (from_type == "seller"):
            if (len(check) == 0):
                await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞:")
                await Dispute_Add.desc.set()
                await state.update_data(from_user="seller")
                await state.update_data(seller_userid=seller_profile[1])
                await state.update_data(buyer_userid=buyer_profile[1])
                await state.update_data(seller_name=seller_profile[2])
                await state.update_data(buyer_name=buyer_profile[2])
                await state.update_data(deal_id=deal_id)
            else:
                keyboard.add(InlineKeyboardButton(f"–ö —Å–ø–æ—Ä–∞–º", callback_data=f"my_disputes:{seller_profile[1]}"))
                await call.message.edit_text("–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–ø–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏!", reply_markup=keyboard)
        elif (from_type == "buyer"):
            if (len(check) == 0):
                await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞:")
                await Dispute_Add.desc.set()
                await state.update_data(from_user="buyer")
                await state.update_data(seller_userid=seller_profile[1])
                await state.update_data(buyer_userid=buyer_profile[1])
                await state.update_data(seller_name=seller_profile[2])
                await state.update_data(buyer_name=buyer_profile[2])
                await state.update_data(deal_id=deal_id)
            else:
                keyboard.add(InlineKeyboardButton(f"–ö —Å–ø–æ—Ä–∞–º", callback_data=f"my_disputes:{buyer_profile[1]}"))
                await call.message.edit_text("–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–ø–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏!", reply_markup=keyboard)
#------------------------------------–°–î–ï–õ–ö–ò

#------------------------------------–°–ü–û–†–´
#–°–ø–æ—Ä. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(text_startswith="dispute:", state="*")
async def dispute(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    seller = int(call.data.split(":")[2])
    buyer = int(call.data.split(":")[3])
    from_type = call.data.split(":")[4]
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–î–∞", callback_data=f"deal_finish:dispute:{deal_id}:{seller}:{buyer}:{from_type}"))
    kb.add(InlineKeyboardButton(f"–ù–µ—Ç", callback_data=f"back_to_finish:{deal_id}:{seller}:{buyer}:{from_type}"))
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=kb)

#–°–ø–æ—Ä. –ù–µ—Ç
@dp.callback_query_handler(text_startswith="back_to_finish:", state="*")
async def dispute_no(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    seller = int(call.data.split(":")[2])
    buyer = int(call.data.split(":")[3])
    from_type = call.data.split(":")[4]
    keyboard = InlineKeyboardMarkup()
    keyboard2 = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_finish:accept:{deal_id}:{seller}:{buyer}"))
    keyboard.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute:{deal_id}:{seller}:{buyer}:buyer"))
    keyboard2.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"dispute:{deal_id}:{seller}:{buyer}:seller"))
    if (from_type == "seller"):
        await call.message.edit_text("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.", reply_markup=keyboard2)
    elif (from_type == "buyer"):
        await call.message.edit_text(f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–æ–∫—É–ø–∫—É! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!", reply_markup=keyboard)

#–°–ø–æ—Ä. –ü—Ä–∏—á–∏–Ω–∞
@dp.message_handler(state=Dispute_Add.desc)
async def dispute_create(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    data = await state.get_data()
    await db.dispute_add(data['from_user'], int(data['seller_userid']), int(data['buyer_userid']), data['seller_name'], data['buyer_name'], int(data['deal_id']), data['desc'])
    keyboard = InlineKeyboardMarkup()
    if (data['from_user'] == "seller"):
        keyboard.add(InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–æ—Ä–∞–º", callback_data=f"my_disputes:{int(data['buyer_userid'])}"))
        await bot.send_message(int(data['buyer_userid']), f"–ù–∞ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É —Å–¥–µ–ª–∫–∏ ‚Ññ{int(data['deal_id'])}", reply_markup=keyboard)
    elif (data['from_user'] == "buyer"):
        keyboard.add(InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–æ—Ä–∞–º", callback_data=f"my_disputes:{int(data['seller_userid'])}"))
        await bot.send_message(int(data['seller_userid']), f"–ù–∞ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É —Å–¥–µ–ª–∫–∏ ‚Ññ{int(data['deal_id'])}", reply_markup=keyboard)
    keyboard.add(InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–æ—Ä–∞–º", callback_data=f"my_disputes:{message.from_user.id}"))
    await message.answer(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ø–æ—Ä –ø–æ –ø–æ–≤–æ–¥—É —Å–¥–µ–ª–∫–∏ ‚Ññ{int(data['deal_id'])}", reply_markup=keyboard)
    await state.finish()

#–°–ø–æ—Ä. –ú–æ–∏ —Å–ø–æ—Ä—ã
@dp.callback_query_handler(text_startswith="my_disputes:", state="*")
async def my_disputes(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã", callback_data=f"disputes_type:active:{userid}"), InlineKeyboardButton(f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã", callback_data=f"disputes_type:closed:{userid}"))
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"back_to_profile:{userid}"))
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Å–ø–æ—Ä—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", reply_markup=keyboard)

#–°–ø–æ—Ä. –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–ø–æ—Ä–∞
@dp.callback_query_handler(text_startswith="disputes_type:", state="*")
async def my_disputes(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    userid = int(call.data.split(":")[2])
    if (type == "active"):
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ø–æ—Ä", reply_markup=await func.my_disputes(userid, 0, 0))
    elif (type == "closed"):
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ø–æ—Ä", reply_markup=await func.my_disputes(userid, 0, 1))

#–°–ø–æ—Ä. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(text_startswith="disp_add_msg:", state="*")
async def disp_add_msg(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∞", callback_data=f"my_disp_open:{userid}:{deal_id}"))
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await Dispute_Msg.text.set()
    await state.update_data(deal_id=deal_id)

#–°–ø–æ—Ä. –°–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state=Dispute_Msg.text)
async def disp_add_msg(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–æ—Ä—É", callback_data=f"my_disp_open:{message.from_user.id}:{int(data['deal_id'])}"))
    check = await db.dispute_from(int(data['deal_id']))
    if (check[2] == message.from_user.id):
        await db.dispute_add_msg("seller", data['text'], int(data['deal_id']))
        await bot.send_message(check[3], f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{int(data['deal_id'])}")
    if (check[3] == message.from_user.id):
        await db.dispute_add_msg("buyer", data['text'], int(data['deal_id']))
        await bot.send_message(check[2], f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{int(data['deal_id'])}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=keyboard)

#–°–ø–æ—Ä. –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–∏—Ö —Å–ø–æ—Ä–æ–≤
@dp.callback_query_handler(text_startswith="my_disp_open:", state="*")
async def my_disputes(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    userid = int(call.data.split(":")[1])
    deal_id = int(call.data.split(":")[2])
    disp = await func.my_disp_open(deal_id, 0, userid)
    await call.message.edit_text(disp[0], reply_markup=disp[1], parse_mode="Markdown")
#------------------------------------–°–ü–û–†–´

#------------------------------------–û–¢–ó–´–í–´
#–û—Ç–∑—ã–≤—ã. –í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏
@dp.callback_query_handler(text_startswith="deal_feedback:", state="*")
async def deal_feedback(call: types.CallbackQuery, state: FSMContext):
    seller = int(call.data.split(":")[1])
    buyer = int(call.data.split(":")[2])
    btn1 = KeyboardButton('üëç')
    btn2 = KeyboardButton('üëé')
    type = ReplyKeyboardMarkup(resize_keyboard = True).add(btn1, btn2)
    await call.message.delete()
    await call.message.answer("*–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É*", reply_markup=type, parse_mode="Markdown")
    await FeedBack_add.type.set()
    await state.update_data(seller_userid = seller)
    await state.update_data(buyer_userid = buyer)

#–û—Ç–∑—ã–≤—ã. –¢–∏–ø –æ—Ç–∑—ã–≤–∞
@dp.message_handler(state=FeedBack_add.type)
async def deal_feedback(message: types.Message, state: FSMContext):
    if (message.text == 'üëç'):
        await state.update_data(type=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤", reply_markup=ReplyKeyboardRemove(), parse_mode="markdown")
        await FeedBack_add.text.set()
    elif (message.text == 'üëé'):
        await state.update_data(type=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤", reply_markup=ReplyKeyboardRemove(), parse_mode="markdown")
        await FeedBack_add.text.set()

#–û—Ç–∑—ã–≤—ã. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@dp.message_handler(state=FeedBack_add.text)
async def deal_feedback(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    check = await db.check_admin(int(data['buyer_userid']))
    await db.add_feedback(int(data['seller_userid']), int(data['buyer_userid']), data['type'], data['text'])
    if (check == 1):
        await message.answer("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=AmainMenu)
        await bot.send_message(int(data['seller_userid']), "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –æ—Ç–∑—ã–≤!")
    else:
        await message.answer("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=mainMenu)
        await bot.send_message(int(data['seller_userid']), "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –æ—Ç–∑—ã–≤!")
    await state.finish()
#------------------------------------–û–¢–ó–´–í–´

#------------------------------------–í–´–í–û–î –°–†–ï–î–°–¢–í
#–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä/—Å–æ–∑–¥–∞—Ç—å
@dp.callback_query_handler(text_startswith="my_payouts:", state="*")
async def my_payouts(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    userid = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data=f"my_payout:active:{userid}"), InlineKeyboardButton(f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", callback_data=f"my_payout:finished:{userid}"))
    keyboard.add(InlineKeyboardButton(f"–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"my_payout:create:{userid}"))
    keyboard.add(InlineKeyboardButton(f"üëà–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"back_to_profile:{userid}"))
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é", reply_markup=keyboard)

#–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞, –≤—ã–≤–æ–¥ –∑–∞—è–≤–æ–∫
@dp.callback_query_handler(text_startswith="my_payout:", state="*")
async def my_payout(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    userid = int(call.data.split(":")[2])
    if (type == "active"):
        pays = await func.my_payouts(userid, 0, 0)
        await call.message.edit_text(pays[0], reply_markup=pays[1], parse_mode="Markdown")
    elif(type == "finished"):
        pays = await func.my_payouts(userid, 0, 1)
        await call.message.edit_text(pays[0], reply_markup=pays[1], parse_mode="Markdown")
    elif (type == "create"):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"my_payouts:{userid}"))
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –±–∞–Ω–∫ –∫—É–¥–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *+79999999999 –°–±–µ—Ä–ë–∞–Ω–∫*", reply_markup=keyboard, parse_mode="Markdown")
        await Payout_create.text.set()

#–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞
@dp.message_handler(state=Payout_create.text)
async def my_payout(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"my_payouts:{message.from_user.id}"))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ —á–∏—Å–ª–æ–º", reply_markup=keyboard)
    await Payout_create.sum.set()

#–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞
@dp.message_handler(state=Payout_create.sum)
async def my_payout(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"my_payouts:{message.from_user.id}"))
    try:
        int(message.text)
        check = await db.profile(message.from_user.id)
        if (check[6] < int(message.text)):
            await message.answer(f"–û—à–∏–±–∫–∞! –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å!\n–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: {check[6]}", reply_markup=keyboard)
            await Payout_create.sum.set()
        elif (int(message.text) <= 0):
            await message.answer(f"–û—à–∏–±–∫–∞! –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å *–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é*!\n*–î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:* {check[6]}", reply_markup=keyboard, parse_mode="Markdown")
            await Payout_create.sum.set()
        else:
            data = await state.get_data()
            await db.create_payout(message.from_user.id, message.from_user.full_name, int(message.text), data['text'])
            await db.upd_user("balance", check[6]-int(message.text), message.from_user.id)
            await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=keyboard)
            await state.finish()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=keyboard)
        await Payout_create.sum.set()
#------------------------------------–í–´–í–û–î –°–†–ï–î–°–¢–í

#------------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
#–û—Ç–º–µ–Ω–∞
@dp.callback_query_handler(text_startswith="cancel", state="*")
async def mydeals(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ!")

#–í—ã–≤–æ–¥ —Å–¥–µ–ª–æ–∫
@dp.callback_query_handler(text_startswith="mydeals:", state="*")
async def mydeals(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    deals = await func.my_deals(userid, 0)
    await call.message.edit_text(deals[0], reply_markup=deals[1], parse_mode="HTML")

#–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥ —Å–¥–µ–ª–∫–∏
@dp.callback_query_handler(text_startswith="deal_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    await call.message.edit_text("–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:", reply_markup=await func.my_deals(userid, remover))

#–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥ –æ—Ç–∑—ã–≤—ã
@dp.callback_query_handler(text_startswith="feed_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    my_userid = int(call.data.split(":")[3])
    list = await func.feedback(userid, remover, my_userid)
    await call.message.edit_text(list[0], reply_markup=list[1], parse_mode="Markdown")

#–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥ —Å–ø–æ—Ä—ã
@dp.callback_query_handler(text_startswith="disp_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    status = int(call.data.split(":")[3])
    list = await func.my_disputes(userid, remover, status)
    await call.message.edit_text(list[0], reply_markup=list[1], parse_mode="Markdown")

#–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–æ—Ä–∞—Ö
@dp.callback_query_handler(text_startswith="dispute_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    deal_id = int(call.data.split(":")[2])
    userid = int(call.data.split(":")[3])
    list = await func.my_disp_open(deal_id, remover, userid)
    await call.message.edit_text(list[0], reply_markup=list[1], parse_mode="Markdown")

#–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
@dp.callback_query_handler(text_startswith="payouts_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    userid = int(call.data.split(":")[2])
    status = int(call.data.split(":")[3])
    list = await func.my_payouts(userid, remover, status)
    await call.message.edit_text(list[0], reply_markup=list[1], parse_mode="Markdown")
#------------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò