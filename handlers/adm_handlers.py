from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from functions.markup import *

from functions.disp import dp, bot

import functions.afunc as afunc

import db

class Spam(StatesGroup):
    text = State()

class aDispute_Msg(StatesGroup):
    deal_id = State()
    text = State()

#-----------------------------------–ö–ù–û–ü–ö–ò
@dp.message_handler(text=['‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞'])
async def admin(message: types.Message):
    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data=f"spam"))
        keyboard.add(InlineKeyboardButton(f"üë§ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data=f"admins"))
        keyboard.add(InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stat"))
        keyboard.add(InlineKeyboardButton(f"üó£ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ä—ã", callback_data=f"adisputes"))
        keyboard.add(InlineKeyboardButton(f"üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data=f"apayouts"))
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="back_to_amenu", state="*")
async def spam(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data=f"spam"))
    keyboard.add(InlineKeyboardButton(f"üë§ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data=f"admins"))
    keyboard.add(InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stat"))
    keyboard.add(InlineKeyboardButton(f"üó£ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ä—ã", callback_data=f"adisputes"))
    keyboard.add(InlineKeyboardButton(f"üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data=f"apayouts"))
    await call.message.edit_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
#-----------------------------------–ö–ù–û–ü–ö–ò

#-----------------------------------–í–´–í–û–î –°–†–ï–î–°–¢–í
@dp.callback_query_handler(text_startswith="apayouts", state="*")
async def payouts(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:", reply_markup=await afunc.payouts(0))

@dp.callback_query_handler(text_startswith="payouts_open:", state="*")
async def payouts(call: types.CallbackQuery, state: FSMContext):
    id_payouts = int(call.data.split(":")[1])
    check = await db.current_payout(id_payouts)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"‚úÖ–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"success_payouts:{id_payouts}"), InlineKeyboardButton(f"‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"del_payouts:{id_payouts}"))
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"apayouts"))
    await call.message.edit_text(f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{id_payouts}</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b><a href='tg://user?id={check[1]}'>{check[2]}</a>\n<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {check[3]}\n<b>–ö—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å:</b> {check[5]}", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query_handler(text_startswith="success_payouts:", state="*")
async def payouts(call: types.CallbackQuery, state: FSMContext):
    id_payouts = int(call.data.split(":")[1])
    await db.upd_payout(id_payouts)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"apayouts"))
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="del_payouts:", state="*")
async def payouts(call: types.CallbackQuery, state: FSMContext):
    id_payouts = int(call.data.split(":")[1])
    check = await db.current_payout(id_payouts)
    user = await db.profile(check[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"apayouts"))
    await db.upd_user("balance", int(user[6])+int(check[3]), int(user[1]))
    await db.del_payout(id_payouts)
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)
#-----------------------------------–í–´–í–û–î –°–†–ï–î–°–¢–í

#-----------------------------------–†–ê–°–°–´–õ–ö–ê
@dp.callback_query_handler(text_startswith="spam", state="*")
async def spam(call: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"back_to_amenu"))
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥—Å)", reply_markup=keyboard)
    await Spam.text.set()

@dp.message_handler(content_types=['any'], state=Spam.text)
async def spam(message: types.Message, state: FSMContext):
    users = await db.users()
    user = 0
    for count in range(len(users)):
        if (users[count][1] != message.from_user.id):
            try:
                await bot.copy_message(chat_id=users[count][1], from_chat_id=message.chat.id, message_id=message.message_id)
                user += 1
            except:
                pass
    await state.finish()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"back_to_amenu"))
    await message.answer(f"üì¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è *{user}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", reply_markup=keyboard, parse_mode="Markdown")
#-----------------------------------–†–ê–°–°–´–õ–ö–ê

#-----------------------------------–°–ü–û–†–´
#–í—ã–±–æ—Ä —Å–ø–æ—Ä–∞
@dp.callback_query_handler(text_startswith="adisputes", state="*")
async def spam(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ø–æ—Ä:", reply_markup=await afunc.adisputes(0))

#–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞
@dp.callback_query_handler(text_startswith="adisp_open:", state="*")
async def spam(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    disp = await afunc.a_disp_open(deal_id, 0)
    await call.message.edit_text(disp[0], reply_markup=disp[1], parse_mode="Markdown")

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–æ—Ä–µ
@dp.callback_query_handler(text_startswith="adisp_add_msg:", state="*")
async def disp_add_msg(call: types.CallbackQuery, state: FSMContext):
    deal_id = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∞", callback_data=f"adisp_open::{deal_id}"))
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await aDispute_Msg.text.set()
    await state.update_data(deal_id=deal_id)

#–°–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–æ—Ä—É
@dp.message_handler(state=aDispute_Msg.text)
async def disp_add_msg(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–æ—Ä—É", callback_data=f"adisp_open:{int(data['deal_id'])}"))
    await db.dispute_add_msg("admin", data['text'], int(data['deal_id']))
    check = await db.deal(int(data['deal_id']))
    await bot.send_message(check[1], f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}")
    await bot.send_message(check[2], f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=keyboard)

#–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞ –≤ –ø–æ–ª—å–∑—É —é–∑–µ—Ä–∞
@dp.callback_query_handler(text_startswith="disp_close", state="*")
async def spam(call: types.CallbackQuery, state: FSMContext):
    type = call.data.split(":")[1]
    deal_id = int(call.data.split(":")[2])
    check = await db.deal(deal_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–æ—Ä–∞–º", callback_data=f"adisputes"))
    if (type == "seller"):
        profile = await db.profile(check[1])
        await db.dispute_update(deal_id, check[1])
        await bot.send_message(check[1], f"–†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}: –∑–∞–∫—Ä—ã—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–¥–∞–≤—Ü–∞")
        await bot.send_message(check[2], f"–†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}: –∑–∞–∫—Ä—ã—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–¥–∞–≤—Ü–∞")
        await db.upd_deal(deal_id, 5)
        await db.upd_user("balance", profile[6]+(check[6]*0.95), check[1])
        await call.message.edit_text("–°–ø–æ—Ä –∑–∞–∫—Ä—ã—Ç", reply_markup=keyboard)
    elif (type == "buyer"):
        await db.dispute_update(deal_id, check[2])
        await bot.send_message(check[1], f"–†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}: –∑–∞–∫—Ä—ã—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
        await bot.send_message(check[2], f"–†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–ø–æ—Ä–µ –æ —Å–¥–µ–ª–∫–µ ‚Ññ{check[0]}: –∑–∞–∫—Ä—ã—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
        await db.upd_deal(deal_id, 5)
        await db.upd_user("balance", profile[6]+(check[6]*0.95), check[2])
        await call.message.edit_text("–°–ø–æ—Ä –∑–∞–∫—Ä—ã—Ç", reply_markup=keyboard)
#-----------------------------------–°–ü–û–†–´

#-----------------------------------–°–¢–ê–¢–ò–°–¢–ò–ö–ê
@dp.callback_query_handler(text_startswith="stat", state="*")
async def stat(call: types.CallbackQuery, state: FSMContext):
    users = await db.users()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"back_to_amenu"))
    await call.message.edit_text(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}", reply_markup=keyboard)
#-----------------------------------–°–¢–ê–¢–ò–°–¢–ò–ö–ê

#-----------------------------------–ê–î–ú–ò–ù–´
@dp.callback_query_handler(text_startswith="admins", state="*")
async def admins(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=await afunc.admins(0))

@dp.callback_query_handler(text_startswith="admin_open:", state="*")
async def admins(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    profile = await db.profile(userid)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"admin:{profile[1]}"))
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data=f"back_to_amenu"))
    await call.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={profile[1]}'>{profile[2]}</a>", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query_handler(text_startswith="admin:", state="*")
async def admin(call: types.CallbackQuery, state: FSMContext):
    userid = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data=f"back_to_amenu"))
    await db.upd_user("is_admin", 0, userid)
    await db.upd_user_adm("status", "User", userid)
    await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard)
    await bot.send_message(userid, "–í–∞—Å —Å–Ω—è–ª–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=mainMenu)
#-----------------------------------–ê–î–ú–ò–ù–´

#-----------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
@dp.callback_query_handler(text_startswith="adm_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    await call.message.edit_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=await afunc.admins(remover))

@dp.callback_query_handler(text_startswith="adisp_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    await call.message.edit_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=await afunc.adisputes(remover))

@dp.callback_query_handler(text_startswith="adispute_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    deal_id = int(call.data.split(":")[2])
    disp = await afunc.a_disp_open(deal_id, remover)
    await call.message.edit_text(disp[0], reply_markup=disp[1], parse_mode="Markdown")
#-----------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò